# Открытый студенческий конкурс (хакатон) по быстрому прототипированию решений Интернета вещей с применением интерфеса "Мозг-компьютер"


##Содержание

- [Аннотация](#0)
- [1. Введение](#1)
	- [1.1. Инфраструктура типового решения IoT](#11)
	- [1.2. Интерфейс "мозг-компьютер" на основе вызванной волны P300](#12)
		- [1.2.1. Интерфейсы на основе мю-ритма](#121)
		- [1.2.2. Интерфейсы на основе альфа-ритма](#122)
		- [1.2.3. Интерфейсы на основе SSVEP и айтрекинг](#123)
		- [1.2.4. Интерфейсы, использующие P300](#124)
		- [1.2.5. Дополнительная литература](#125)
	- [1.3. Протокол MQTT](#13)
	- [1.4. Облачная платформа *Bluemix*](#14)
	- [1.5. Краткое описание концепций *Bluemix*](#15)
		- [1.5.1. Развертывание и управление приложением](#151)
		- [1.5.2. Сервисы DevOps Services для *Bluemix*](#152)
		- [1.5.3. Среда визуальной разработки JavaScript приложений Node-RED](#153)
		- [1.5.4. Терминология Node-RED](#154)
		- [1.5.5. Пример использования Node-RED](#155)
	- [Принцип действия электроэнцефалографа](#2)
		- [//ToDo](#21)
- [//ToDo Нейронные сети](#3)
	- [//ToDo](#31)
	- [//ToDo](#32)
	- [//ToDo](#33)
- [Raspberry Pi](#4)
	- [Описание](#41)
		- [Порты и аппаратные интерфейсы](#411)
		- [Распиновка платы](#412)
		- [Питание](#413)
	- [Разбор тестового примера:](#42) 
	- [Настройка SSH соединения с Raspberry Pi](#43)
	- [Как узнать адрес Raspberry?](#44)
	- [Полезные команды для работы в ОС Raspbian](#45)
	- [Программирование](#46)
	- [//ToDo Подключение электроэнцефалографа к Raspberry](#47)
	- [//ToDo Взаимодействие с ЭЭГ на Raspberry](#48)
		- [//ToDo](#481)
		- [//ToDo](#482)
		- [//ToDo](#483)
- [Работа с IBM Bluemix](#5)
	- [Регистрация в Bluemix](#51)
	- [Создание приложения Node.js](#52)
	- [Подключение сервиса Watson IOT](#53)
	- [Принципы обмена MQTT-сообщениями в Bluemix и создание MQTT Device и MQTT API key](#54)
	- [Описание подключения к MQTT брокеру и проверка передачи MQTT сообщений с помощью MQTTlens](#55)
	- [//ToDo Визуализация данных ЭЭГ](#56)
- [//ToDo Тренажер управления инвалидной коляской](#6)
	- [//ToDo](#61)
	- [//ToDo](#62)
	- [//ToDo](#63)
- [//ToDo Основной алгоритм управления системой и тестирование проекта ИМК](#7)
	- [//ToDo](#71)
	- [//ToDo](#72)
	- [//ToDo](#73)
- [Описание оборудования лаборатории Интернета вещей](#50)
# Аннотация <a name="0"></a>

> Всем участникам соревнования предоставляется необходимое оборудование для реализации прототипа решения Интернета вещей и интерфеса мозг-компьютер: цифровой электроэнцефалограф, микрокомпьютеры, средства сопряжения. 

> В ходе соревнования типовой проект может быть использован для построения широкого спектра решений: 

> - в медицине; 

> - на отвтсвенном производстве; 

> - в бытовых условиях; 

> - транспорте и других областях.

> Задача для участников соревнования ставится следующим образом: **используя имеющийся набор сбора электроэнефалограммы головного мозга, микрокомпьютеры, облачные сервисы и приложения, разработать прототип распределенной системы Интернета вещей на основе ИМК.** 

> Допускается применение иных облачных платформ и аппаратно-программных решений. Прототип системы будет собран на специальном стенде в лаборатории IoT МГТУ им. Баумана, где он может быть продемонстрирован жюри. 



****
#1. Введение <a name="1"></a>

Воплощение потенциала идей, заложенных в концепцию Интернета вещей, способно существенно изменить уклад современной экономики. Благодаря внедрению масштабируемых облачных решений, использованию большого количества датчиков и распределенных микропроцессорных систем уже в ближайшее время могут быть созданы прорывные решения в таких областях, как: транспорт, сельское хозяйство, промышленное производство, здравоохранение, социальная сфера, быт и других. Все большее количество компаний обращает внимание на применение идей и технологий Интернета вещей для внедрения аналитики их деятельности и поиска новых возможностей для продуктов и услуг.

> *Интернет вещей (англ. Internet of Things, IoT) — это концепция вычислительной сети физических объектов («вещей»), оснащённых встроенными технологиями для взаимодействия друг с другом или с внешней средой.*
> 

Перечислим некоторые интересные факты:
-   По оценкам специалистов, к 2020 году к сети Интернет будет подключено до 50 млрд устройств, 20 млрд из них будут задействованы в инфраструктуре IoT.

![Прогноз количества устройств, подключенных к сети Интернет](assets/intro01.jpg)

-   До 90% данных, анализируемых устройствами Интернета вещей ранее не подвергались обработке.
-   До 60% данных, получаемых устройствами Интернета вещей, остаются актуальными лишь несколько миллисекунд.
-   В настоящее время только 0,1% устройств, способных выполнять полезную вычислительную нагрузку, подключены к сети.


Применение интерфейса мозг-компьютер (ИМК) в системах Интернета вещей в перспективе позволит устранить имеющиеся недостатки современных информационных и управляющих систем при взаимодейтсвии с человеком: т.е. необходимость обработки мышечной активности человека в качестве информации о реакции на внешние события. Целями передовых исследований и разработок коллективов ученых в области ИМК является расширение участия человека в принятии решений в кибер-физических системах, что способно существенно расширить их функциональность. Поэтому в нашем хакатоне мы также используем элементы ИМК, в частности, элекроэнцефалографы для анализа реакции человека на возникающие события. 


****
## 1.1. Инфраструктура типового решения IoT <a name="11"></a>

> 
>Под типовым решением Интернета вещей в данном конкурсе понимается распределенная кибер-физическая система, интегрирующая вычислительные ресурсы в физические процессы. В такой системе должны быть реализованы следующие основные функции:
> 

-   Сбор первичных данных с помощью сенсоров, расположенных в непосредственной близости от реальных объектов.
-   Управление объектами через актуаторы, подключенные к микрокомпьютерам.
-   Передача первичных данных от микрокомпьютеров в вычислительный хаб и в обратном направлении.
-   Первичная обработка данных в вычислительном хабе, формирование пакетов данных для передачи их в облако.
-   Получение и хранение данных в облаке.
-   Аналитическая обработка в облаке и формирование ключевых показателей эффективности (KPI) на основе данных об объектах, данных от сторонних источников, исторических данных.
-   Визуализация данных и результатов анализа на различных платформах: мобильных устройствах, носимой электронике, планшетах, компьютерах,     мониторах и пр.
-   Прием команд от внешних управляющих консолей.
-   Принятие решений на основе KPI и команд, выработка управляющих и информационных сообщений для актуаторов.
-   Передача управляющих сообщений в вычислительные хабы.

Примером подобной системы является структура, представленная на следующем рисунке.

![Пример решения Интернета вещей](assets/intro03.png)
**Пример решения Интернета вещей**

> 
> Мы используем в качестве примера автоматизированную систему для тренинга управления инвалидной коляскойна основе ИМК.***
> 

В примере использовано оборудование:

-   ЭЭГ (электроэнцефалограф), прибор для исследования активности головного мозга путем детектирования электрических импульсов, исходящих из различных его областей. 
-   Микрокомпьютеры на основе микроконтроллера STM32 раположен непосредственно внутри ЭЭГ прибора и служит для первичной обработки потенциалов электродов в цифровой код и их передачу вычислительному хабу.
-   Микрокомпьютер RaspberryPi используется в качестве вычислительного хаба.
-   Монитор используется для в качестве информационного табло для предъявления зрительных образов.
-   Облачная платформа IBM Bluemix для реализации сервисов хранения, аналитической обработки и визуализации данных.

Система работает следующим образом. 


![Функциональная схема проекта](assets/Intro031.png)
**Функциональная схема проекта**


-	Работой всей системы управляет Основная программы, работающей на хабе (микрокомьютере RaspberryPi).
-	Цикл управления начинается с предъявленния человеку зрительного образа команды через монитор, подключенный к хабу. В хакатоне будет использован доступ графическому экрану хаба по протоколу `VNC` (например, с помощью программы VNCViewer). В качестве команд предъявляются поочередно два изображения: "Стрелка влево" и "Стрелка вправо", символизирующие поворото инвалидной коляски влево и вправо.
-	Человек, обученный методике P300, задумывает необходимую ему команду и мысленно отвечает "ДА" в тот момент, когда команда появляется на экране. В этом случае приблизительно через 300 мс после предъявления мозг человека активно реагирует на него вызванной волной P300.
-	С помощью ЭЭГ потенциалы от трех электродов обрабатываются (фильтруются от посторонних сигналов и наведенных потенциоалов), и передаются в виде пакетов данных через интерфейс USB в вычислительный хаб. 
-	Через 100 мс после предъявления данные ЭЭГ начинают накапливаться в программном FIFO буфере хаба, реализованном в Python. 
- 	По прошествии 500 мс от начала предъявления (данные принимаются в течении 400 мс для учета индивидуальных особенностей мозговой активности человека) прием данных заканчивается и пакет данных передается на искусственнуюнейронную сеть.
-	Режимом работы нейронной сети управляет приложение в облачной платформе `Bluemix`. Доступны два режима работы: обучение нейронной сети, рабочий режим. На веб-странице `Консоли управления` с помощью броузера возможно изменить режим работы. В таком случае режим передается в вычислительный хаб.
-	Нейронная сеть принимает данные из FIFO и классифицирует наличие (или отсутствие) вызванной волны P300.
-	Информация о результате классификации, а также первичные данные от ЭЭГ, передаются в Консоль управления.
-	Информация о результате классификации передается в приложение, имитирующее 3D движение инвалидной коляски в пространстве. В результате выполняет изменение сцены движения с оответствии с поступившей командой.
-	После завершения обработки предыдущей команды, Основная программа переходит к выдаче следующей команды.
 

****

## 1.2. Интерфейс "мозг-компьютер" на основе вызванной волны P300<a name="12"></a>

Основноей целью применения ИМК является получение компьютерной системой однозначно интерпретируемых команд непосредственно от головного мозга без использования мышечной активности. Для разработки ИМК следует рассматривать три основные парадигмы ([1](#pub1)):

- ***Неинвазивный ИМК, основанный на распознавании ментальных состояний***, вызванных воображаемым выполнением движений. Он обеспечивает формирование дискретных управляющих команд и требует минимального времени обучения оператора при достаточно высокой производительности.

- ***Неинвазивный ИМК, использующий принцип непрерывного управления***. После выработки навыка управления, такой ИМК позволяет управлять внешним устройством как собственным (виртуальным) исполнительным органом, не требуя ментального кодирования дискретного набора команд.

- ***Инвазивный ИМК, основанный на двусторонней связи мозг-компьютер*** посредством имплантируемых электродов и позволяющий полностью инкорпорировать внешние технические устройства во внутреннюю нейронную модель схемы тела и, соответственно, оперировать с ними так же, как и с естественными исполнительными
органами. 

> 
>В хакатоне нами будут применятся неинвазивные ИМК первого типа, построенные на основе многоканальной `эктроэнцефалограммы головного мозга (ЭЭГ)`. В основе такой системы лежит регистрация электрического потенциала на поверхности головы и его компьютерная обработка.
> 

В ЭЭГ человека прослеживается определенная ритмическая активность, которая делится на несколько групп в зависимости от частоты волн (`альфа-ритм`, `бета-ритм`, `гамма-ритм`, `дельта-ритм`, `мю-ритм`). Для состояния бодрствования характерны бета- и мю-ритмы. Гамма- и дельта-ритмы появляются при засыпании и во сне. Альфа-ритм появляется при закрывании глаз, а также в медитативных состояниях. В связи с этими особенностями ритмов в ИМК наиболее часто используются мю-, бета- и альфа-ритмы.

****
![Основные ритмы ЭЭГ человека](assets/true_rhythms.png)
**Основные ритмы ЭЭГ человека ([2](#pub2))** 

****
![Регистрируемые на ЭЭГ потенциалы, возникающие не в головном мозге - артефакты](assets/wrong_rhythms.png)
**Регистрируемые на ЭЭГ потенциалы, возникающие не в головном мозге - артефакты ([3](#pub3))** 

****
### 1.2.1. Интерфейсы на основе мю-ритма ([4](#pub4))<a name="121"></a> 



Интерфейсы на основе мю-ритма, как правило, используют моторное воображение (motor imaginery, MI) – мысленное воображение движений (например, поднятия левой или правой руки), при котором человек не совершает реальных движений. При представлении движений происходит подавление характерного для состояния бодрствования мю-ритма (частотой 7-11 Гц), регистрируемого электродами, расположенными на коже головы в центральных и центрально-височных областях. Пользователя подобным интерфейсом инструктируют, что в момент, когда он хочет отдать команду интерфейсу, он должен представить то или иное движение. Классификатор обучают различать два типа электрической активности – наличие мю-ритма (синхронизация) и отсутствие мю-ритма (десинхронизация, замещение мю-ритма в ЭЭГ менее синхронными низкоамплитудными колебаниями). Таким образом, после обучения классификатора, можно установить, что в момент, когда произошла десинхронизация мю-ритма, пользователь хотел отдать команду, и запрограммировать компьютер на определенные действия, совершаемые в этом случае.

Так, в одном из исследований с применением подобного интерфейса, айтрекинг использовался для отслеживания взгляда пользователя, выбирающего одну из нескольких целей на мониторе компьютера, а моторное воображение – для подтверждения выбора (O’Doherty et al., 2014). В другом исследовании к компьютеру была подключена система управления экзоскелетом руки, который был разработан для больных гемипарезом. С помощью айтрекинга происходило отслеживание намерения пользователя взять тот или иной объект в реальной среде (выбор цели), а моторное воображение использовалось для контроля различных параметров движения руки (скорость, ускорение) и для конечного захвата объекта (Frisoli et al., 2012). Существуют и другие варианты интерфейсов. Интерфейсы, использующие моторное воображение, удобны в использовании, так как обеспечивают интуитивное управление (представил движение – произошло движение, при условии, что интерфейс подключен, например, к роботизированной руке), но требуют достаточно длительного обучения.


****
### 1.2.2. Интерфейсы на основе альфа-ритма <a name="122"></a>

Интерфейсы, использующие альфа-ритм, устроены таким образом, что для отдачи определенной команды нужно закрыть глаза. Пример подобного гибридного интерфейса – система управления роботизированной рукой, в которой саккады использовались для перемещения руки в одном из четырех направлений, а для сжатия руки пользователю необходимо было закрыть глаза, при этом интерфейс улавливал изменение в электроэнцефалограмме (появление альфа-ритма) (Postelnicu et al., 2011). Интерфейсы также вполне успешно работают, но минус достаточно очевиден – при отдаче команды ненадолго теряется зрительная связь с окружающей средой, и, кроме того, подобное управление несколько утомительно. Кроме того, у некоторых людей альфа-ритм слабо выражен, что затрудняет широкое применение интерфейсов, использующих его для управления.


****
### 1.2.3. Интерфейсы на основе SSVEP и айтрекинг <a name="123"></a>

В других гибридных интерфейсах используются зрительные вызванные потенциалы стабильного состояния (SSVEP) и айтрекинг. SSVEP - устойчивые зрительные вызванные потенциалы, которые возникают при стимуляции на частоте от 3,5 до 75 Гц (Beverina et al, 2003), при этом частота потенциалов повторяет частоту предъявления зрительных стимулов. Пользователей данных интерфейсов инструктируют, что для отдачи команды необходимо сосредоточить внимание на зрительном стимуле. Классификатор обучается различать изменения в ЭЭГ при появлении SSVEP на стимул, мигающий с определенной частотой. Один из примеров подобной гибридной системы – система для набора текста, совмещающая в себе SSVEP и айтрекинг (Lee et al., 2013). В этой системе 30 клавиш (буквы английского алфавита и другие кнопки, необходимые для ввода текста) постоянно мигали, каждая на своей частоте, для выбора определенной буквы нужно было сконцентрировать внимание на ней, при этом контролировалось положение взгляда. В случае, если оно сильно не соответствовало положению клавиши, команда напечатать букву не отдавалась.


Другой пример гибридного интерфейса, совмещающий в себе ИМК-SSVEP и айтрекинг – система управления простой игрой, в которой нужно собрать паззл (Kos’Myna, 2013). 

Интерфейсы на основе SSVEP и айтрекинга, в которых используется  большое количество стимулов, в ряде случаев могут вызывать достаточно сильное утомление,  так как пользователю приходится постоянно смотреть на экран, где мигает большое число стимулов на разной частоте. Кроме того, при некоторых условиях они потенциально эпилептогенны.

****
### 1.2.4. Интерфейсы, использующие P300<a name="124"></a>


Компонент Р300 возникает в ответ на неожиданный редко предъявляемый (например, предъявляемый с вероятностью 0.2) значимый стимул, когда он появляется среди часто предъявляемых незначимых стимулов. 

Р300 возникает примерно на 300 мс после предъявления значимого стимула, имеет длительность около 300–400 мс и положительную амплитуду 5–15 мкB. Максимальная амплитуда Р300 наблюдается под центральным электродом. Чем реже предъявляется значимый стимул, тем больше амплитуда Р300. Как правило, требуется несколько усреднений для его выделения из фоновой активности. Р300 зависит от внимания испытуемого, но не от физических параметров стимула.

Р300 — часть сложного потенциала, отражающего процессы переработки информации в мозге, связанные с направленным вниманием при выполнении когнитивной задачи. Физические параметры стимула отражаются в параметрах ранних компонентов вызванных потенциалов. Процессы опознания и классификации стимулов отражаются в компонентах с латентность 96-250 мс после начала стимула, которые принято обозначать как волну N200. Непосредственно с потенциалом P300 связаны завершающие этапы обработки информации - окончательная классификация стимула и принятие решения о действии, связанном со стимулом (Picton, 1992). Существуют некоторые особенности эндогенных вызванных потенциалов на различные зрительные стимулы. Так, некоторых работах показано, что ЗВП на изображения лиц имеют характерные именно для такой стимуляции компоненты (Zhang et al., 2012).

Для выделения P300 используется «оддболл» парадигма или ее модификации – человеку предъявляются целевые и нецелевые стимулы (зрительные или слуховые), причем целевых стимулов на порядок меньше, дается задание считать редкие стимулы про себя. Электроэнцефалограмму разбивают на эпохи относительно подачи редкого стимула, полученные отрезки суммируют, таким образом выделяются вызванные потенциалы, в которых с латентностью около 300 мс появляется волна P300  (цифра «300» в названии как раз и указывает на латентность этой волны). 


Классический интерфейс на основе волны P300 – система для печати, которая представляет собой матриц из букв, в которой последовательно подсвечиваются строки и столбцы (Farwell, Donchin, 1998). Пользователь отмечает про себя (как правило, счетом) появление строки или столбца, содержащего нужную ему букву. Каждая строчка и столбец подсвечивается по нескольку раз, в быстром темпе, что позволяет усреднить реакции на стимулы и выделить, в каких из них наблюдается P300. Таким образом, находя строчку и столбец, на которые удалось выделить такую реакцию, определяют букву, которую хотел напечатать пользователь.


![Позитивный компонент зрительного вызванного потенциала с латентностью около 300 мс (Вызванная волна P300)](assets/P300.jpeg)
**Позитивный компонент зрительного вызванного потенциала с латентностью около 300 мс (Вызванная волна P300) ([3](#pub3))**


Интерфейсы, использующие P300, на данный момент получили широкое распространение, на их основе разрабатываются устройства для парализованных людей (системы для печати букв, инвалидные коляски), игровые приложения (Kaplan et al., 2013), а также ИМК-P300 используются в таких необычных исследованиях, как создание виртуальной реальности и рисование силой мысли (Fazel-Rezai et al., 2012).


****

## 1.3. Облачная платформа *Bluemix* <a name="13"></a>

***Bluemix*** — это открытое облачное предложение типа PaaS
(*Platform-as-a-Service*) на базе проекта с открытым исходным кодом Cloud Foundry. Эта платформа предназначена для разработки и хостинга приложений, а также упрощения задач по управлению инфраструктурой. Она позволяет быстро создавать и развертывать приложения, а также управлять ими.

***Bluemix*** обеспечивает следующие возможности:

-   быстрое и инкрементное составление приложений из сервисов;
-   непрерывное внесение изменений в приложения и обеспечение постоянной доступности;
-   поддержка высокоспециализированных моделей программирования и сервисов для конкретных рабочих нагрузок;
-   встраивание высокой степени управляемости в сервисы и приложения;
-   оптимизация и эластичная адаптация к рабочей нагрузке.


![Каталог компонентов Bluemix](assets/intro04.jpg)
**Каталог компонентов Bluemix**


Платформа *BlueMix* достигает этих целей посредством абстрагирования и скрытия большинства сложностей, традиционно сопутствующих хостингу приложений в облаке и управлению ими в облачной среде. *Bluemix* может быть использована разработчиками для создания и применения самых разных приложений, включая веб-приложения, мобильные приложения, приложения для работы с большими данными, приложения для разумных устройств и т.д. *Bluemix* поддерживает разработку на популярных языках программирования и средах разработки. Java-технологии, средства создания серверных частей для мобильных приложений, мониторинг приложений, технологии с открытым исходным кодом и т. д. — все эти возможности
доступны в облаке как сервисы.

Каталог *Bluemix* содержит большую часть из того, что необходимо для быстрого начала работы, большое количество шаблонов, заранее сконфигурированны наборов сервисов, сред исполнения и примеров кода, готовых к использованию:

-   сред исполнения, в том числе: Liberty for Java, Node.js, Ruby on Rails;
-   веб-сервисов и сервисов приложений, в том числе: Data/Session Cache,  ElasticMQ, Decision, SSO, Log Analysis, Redis, RabbitMQ, Twilio;
-   мобильных сервисов, в том числе: push-уведомлений, Cloud Code,     Mobile Application Management, Mobile Quality Assurance;
-   сервисов управления данными, в том числе: MongoDB, реляционной базы данных от IBM, JSON-базы данных от IBM, MySQL, PostgreSQL, MobileData, Mobile Sync, BLU Data Warehouse, MapReduce;
-   сервисов мониторинга и анализа;
-   сервисов DevOps Services (прежнее название: JazzHub).


****

## 1.4. Краткое описание концепций *Bluemix* <a name="14"></a>


В терминологии *Bluemix* приложение (*application*) — это созданный вами артефакт, т. е. весь программный код (исходный код или исполняемые двоичные файлы), который необходимо запустить или на который необходимо сослаться в процессе исполнения. Мобильные приложения выполняются за пределами среды *Bluemix* и используют сервисы *Bluemix*, представленные приложениями. В случае веб-приложений приложение — это код, загруженный на платформу *Bluemix* с целью хостинга. Кроме того, платформа *Bluemix* способна осуществлять хостинг программного кода приложения, который вы хотите выполнять на внутреннем сервере в среде на базе контейнера.

На рисунке показаны принципы взаимодействия *Bluemix* с клинтскими приложениями.


![Принципы взаимодействия *Bluemix* с клинтскими приложениями](assets/intro05.jpg)
**Принципы взаимодействия *Bluemix* с клинтскими приложениями**


***Сервис (service)*** — это код, работающий на платформе *Bluemix* и предлагающий некоторую функциональность, которую могут использовать приложения. Это может быть готовый сервис, используемый непосредственно — например, push-уведомления для мобильных приложений или эластичное кэширование для веб-приложения. Вы также можете создавать собственные сервисы в диапазоне от простых служебных функций до сложной
бизнес-логики.

***Организация (organization) и пространство (space)*** — это организационные единицы инфраструктуры, способные хранить и отслеживать ресурсы приложения. Организация содержит домены (domain), пространства и пользователей. Пространство содержит приложения и сервисы. По умолчанию используется три пространства: Development (разработка), Production (производство) и Staging (подготовка). Для приложений, которым требуется среда типа PaaS, предоставляются buildpack-пакеты, каждый из которых представляет собой набор скриптов для подготовки кода к исполнению на целевой PaaS-платформе. Buildpack-пакеты, которые включают необходимую вашим приложениям среду исполнения и могут также содержать специализированные инфраструктуры, упрощают развертывание приложения в облаке по сравнению с самостоятельной установкой и конфигурированием среды исполнения.

Использование сервисов в *Bluemix* включает три этапа:
1.  Сообщите платформе *Bluemix*, что вам требуется новый экземпляр сервиса и какое конкретное приложение будет использовать этот новый экземпляр.
2.  *Bluemix* автоматически инициализирует новый экземпляр этого сервиса и свяжет его с приложением.
3.  Приложение взаимодействует с сервисом.

***Пакеты сервисов (Service bundles)*** — это коллекции API-интерфейсов, используемых в конкретных областях. Например, пакет Mobile Services включает сервисы MobileData, Cloud Code, Push и Mobile Application Management. Доступные сервисы и среды исполнения представлены в каталоге Bluemix. Кроме того, вы можете зарегистрировать собственные сервисы.

### 1.4.1. Развертывание и управление приложением <a name="141"></a>

Чтобы развернуть свое приложение, необходимо загрузить его в среду *Bluemix* и указать, сколько экземпляров этого приложения должно исполняться, а затем сконфигурировать *Bluemix*, введя необходимую информацию для поддержки этого приложения.

В случае мобильного приложения среда *Bluemix* содержит артефакт, который представляет серверную часть мобильного приложения — набор сервисов, который использует приложение для взаимодействия с сервером. *Bluemix* поддерживает серверные компоненты мобильного приложения, взаимодействующие с сервисами PushWorks, Cloud Code и Mobile Data, непосредственно из пользовательского интерфейса *Bluemix*.

В случае веб-приложения необходимо предоставить в *Bluemix* соответствующую информацию о среде исполнения и среде разработки, чтобы платформа смогла сформировать надлежащую инфраструктуру для исполнения этого приложения.

При развертывании приложений и управлении ими можно использовать инструмент командной строки cf, веб-интерфейс *Bluemix* или сервисы DevOps Services.

Браузерные и мобильные клиенты — а также другие приложения, развернутые на платформе *Bluemix* и выполняющиеся за ее пределами — взаимодействуют с приложениями, работающими на платформе *Bluemix*, через API-интерфейсы типа REST/HTTP. Каждый клиентский запрос маршрутизируется к одному из экземпляров приложения или составляющих его сервисов. Среды исполнения приложений в *Bluemix* изолированы друг от друга даже тогда, когда они находятся на одной и той же физической машине.

В ходе управления приложениями можно запускать, останавливать, перезапускать экземпляры приложения (или, в случае веб-приложения, изменять их количество), а также изменять объем памяти, используемый приложением. Ключевая конструктивная особенность *Bluemix* — отличные показатели при хостинге масштабируемых приложений и артефактов приложений. На данный момент эта платформа не масштабирует приложение автоматически в соответствии с нагрузкой, поэтому этим процессом необходимо управлять самостоятельно посредством создания или удаления экземпляров при изменении рабочей нагрузки. По этой причине ваши приложения должны сохранять все персистентные данные за пределами приложения в одном из сервисов хранения данных, предоставляемых платформой *Bluemix*. При повторном развертывании приложения после обновления используется тот же процесс, что и при начальном развертывании. *Bluemix* останавливает все исполняющиеся экземпляры и переводит новые экземпляры в рабочее состояние автоматически.

### 1.4.2. Сервисы DevOps Services для *Bluemix* <a name="142"></a>

При использовании DevOps Services требуется лишь несколько простых шагов для организации взаимодействия с другими специалистами с целью планирования, отслеживания и создания программного обеспечения в облаке. Вы можете воспользоваться встроенным в браузер редактором программного кода, который DevOps Services предоставляет для разработки приложений, или использовать DevOps Services с Eclipse, с VisualStudio или с инструментом командной строки Git для написания кода приложения и развертывания его на платформе BlueMix.

При работе с пользовательским интерфейсом, который помогает разработчику быстро добавлять сведения "кто", "что" и "когда" для своего рабочего проекта, требуется потратить всего несколько минут на задание дат, документирование первого сценария применения, назначение одной-двух задач и переход непосредственно к написанию программного кода.

DevOps Services включает встроенные средства управления исходным кодом — Jazz SCM и хостинговый Git. Каждый проект получает свой собственный репозиторий DevOps Services и рабочее пространство, в котором участники этого проекта могут регистрироваться свои изменения, ассоциировать изменения программного кода и просматривать историю недавних изменений. Кроме того, вы можете создать проект DevOps Services и указать на свой репозиторий GitHub.

Вы также можете с легкостью связать элементы работы с изменениями кода в GitHub. Кроме того, для написания кода в Git вы можете использовать имеющиеся у вас инструменты.

Типичными сценариями использования ресурса DevOps Services являются:

-   Создание приложения для анализа данных социальных сетей с использованием Node.js, Node-RED, Express, sentiment и ntwitter.
-   Создание приложения для создания интерактивных опросов в реальном     времени с использованием Node.js, Node-RED, Express, AngularJS и MongoDB.
-   Построение сервисов уведомления с использованием Node.js, Node-RED и MongoDB.
-   Создание приложений для управления аппаратными устройствами c использованием Node-RED и IoT компонент.

### 1.4.3. Среда визуальной разработки JavaScript приложений Node-RED <a name="143"></a>

**Node-RED** - это визуальная drag-and-drop среда разработки JavaScript рантаймов для IoT (неблокирующих приложений, управляемых событиями). Благодаря большому количеству примитивов и возможности быстрой визуальной настройки и созданию новых компонентов, в том числе непосредственно на языке JavaScript, Node-RED может быть использована как непрофессиональными пользователями, так и профессиональными разработчиками для ускорения создания веб-приложений в облаке. Это позволяет использовать Node-RED для взаимодействия с недорогими аппаратными платформами в рамках подхода IoT, перенося основную часть вычислительной нагрузки на облачную платформу. Помимо этого все созданные рантаймы могут быть объединены в библиотеки решений и впоследствии перенесены в другие проекты благодаря функциям экспорта и
импорта.

### 1.4.4. Терминология Node-RED <a name="144"></a>

*Нод (node)* - функционально законченный блок.

*Поток обработки (flow)* - цепь соединенных нодов и соответствующий им конфигурационный нод.

*Входной нод (input node)* - нод, принимающий внешние данные и задающий начало потоку обработки (flow). Входной нод имеет один или несколько выходных портов (output ports).

*Выходной нод (output node)* - нод, завершающий поток обработки и передающий результаты во внешнюю среду.

*Функциональный нод (function node or query node)* - нод, находящийся внутри потока обработки и имеющий один входной порт и один или несколько выходных портов.

*Конифигурационный нод (config node)* - нод, содержащий конфигурационную информацию, используемую в других нодах. Конфигурационный нод не связан портами с другими типами нодов.

*Набор нодов (node set)* - ноды, включенные в связанные js/html файлы (пары соответствующих друг другу файлов, содержащих связанный код JavaScript и HTML). Ошибка в js/html паре приводит к неработоспособности всех нодов набора.

*Модуль нодов (node module)* - множество связанных js/html файлов (и, соответственно, наборов нодов), где каждая пара описана в package.json файле.

*Пакет нодов (node pack)* - коллекция связанных по функциональности нодов, которые могут быть использованы разработчиком в рамках одного проекта.

![Основное окно проекта в Node-RED](assets/intro06.jpg)
**Основное окно проекта в Node-RED**


### 1.4.5. Пример использования Node-RED <a name="145"></a>

Примером эффективного применения технологии Node-RED может служить проект, на разработку которого требуется около 15 минут. Приложение позволяет автоматически отслеживать текущее местоположение мобильного устройства, определяет прогноз погоды и сообщает о нем через твиттер самому пользователю.

![Поток обработки для информирования о прогнозе погоды](assets/intro07.jpg)
**Поток обработки для информирования о прогнозе погоды**


Решение работает следующим образом:

-   Приложение на мобильном телефоне передает телеметрическую информацию о положении устройства в обрабатывающий поток Node-RED.
-   Телеметрическая информация о местоположении преобразуется в twitter сообщение.
-   Сообщение используется для доступа к прогнозу погоды в ноде Forecast.io.
-   Полученный прогноз форматируется в сообщение twitter.
-   Сообщение посылается на твиттер аккаунт пользователя и отображается на мобильной платформе.

Приведенный пример позволяет реализовать логику взаимодействия с использованием протоколов MQTT, HTTP и Twitters API без глубокого погружения в их технические особенности.





****
## Принцип действия электроэнцефалографа<a name="2"></a>


ЭЭГ представляет собой сложный колебательный электрический процесс, который может быть зарегистрирован при расположении электродов на мозге или на поверхности скальпа, и является результатом электрической суммации и фильтрации элементарных процессов, протекающих в нейронах головного мозга.



****
### Основы электроэнцефалографии головного мозна человека <a name="21"></a>


Многочисленные исследования показывают, что электрические потенциалы отдельных нейронов головного мозга связаны тесной и достаточно точной количественной зависимостью с информационными процессами. Для того чтобы нейрон генерировал потенциал действия, передающий сообщение другим нейронам или эффекторным органам, необходимо, чтобы собственное его возбуждение достигло определенной пороговой величины.

Уровень возбуждения нейрона определяется суммой возбуждающих и тормозных воздействий, оказываемых на него в данный момент через синапсы. Если сумма возбуждающих воздействий больше суммы тормозных на величину, превышающую пороговый уровень, нейрон генерирует нервный импульс, распространяющийся затем по аксону. Описанным тормозным и возбуждающим процессам в нейроне и его отростках соответствуют определенной формы электрические потенциалы.

Как показано выше, электрическая активность отдельных нервных клеток отражает их функциональную активность по переработке и передаче информации. Отсюда можно сделать заключение, что суммарная ЭЭГ также в преформированном виде отражает функциональную активность, но уже не отдельных нервных клеток, а их громадных популяций, т.е., иначе говоря, функциональную активность мозга. Это положение, получившее многочисленные неоспоримые доказательства, представляется исключительно важным для анализа ЭЭГ, поскольку дает ключ к пониманию того, какие системы мозга определяют внешний вид и внутреннюю организацию ЭЭГ.

![Основные отделы головного мозга человека](assets/brain.png)
**Основные отделы головного мозга человека**


****
### Восьмиканальный электроэнцефалограф ИНЭУМ им.И.С.Брука <a name="22"></a>


Электроэнцефалограф производства компании ИНЭУМ им.И.С.Брука представляют собой многоканальные регистрирующие устройства, объединяющие 8 идентичных усилительно-регистрирующих блоков (каналов), позволяющих таким образом регистрировать одномоментно электрическую активность от соответствующего числа пар электродов, установленных на голове обследуемого.

Электроэнцефалограф ООО ИНЭУМ им.И.С.Брука цифрового типа с сухими эоектродами преобразуют ЭЭГ в цифровую форму и вводят ее в микроконтроллер STM32, который управляет  непрерывный процесс регистрации ЭЭГ, одновременно записываемой в память компьютера.

![Электроэнцефалограф ИНЭУМ им.И.С.Брука](assets/eeg.jpg)
**Электроэнцефалограф ИНЭУМ им.И.С.Брука**	


Микроконтроллер STM32 реализует систему генерации управления исполнительными механизмами и потоковую передачу данных по протоколу MODICON MODBUS RTU. 
Протокол реализован на физических линиях интерейса RS232 через микросхему FTDI, транслирущую пакеты RS232 в `USB`. Таким образом, прием и передача пакетов ЭЭГ может босуществяться по интерфейсу USB. 

Для получения доступа к отснятым или уже обработанным данным необходимо выдать ряд команд инициализации, а также команд запросов в формате, представленном ниже:


![Формат пакета запроса](assets/burst.jpg)
**Формат пакета запроса**

В ответ на команды, электроэнцефалограф генерирует следующую последовательность данных. 

![Формат пакета ответа](assets/burst1.jpg)
**Формат пакета ответа**


Ниже приведен код инициализации электроэнцефалографа. 

```
ser = serial.Serial("/dev/ttyUSB0")
ser.baudrate = 460800

if ser.isOpen():
    ser.close()
ser.open()
ser.isOpen()

ser.write("/put/memory?address=39&value=214&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=40&value=194&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=41&value=96&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=42&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=43&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=44&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=45&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=46&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=47&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=48&value=112&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=49&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=50&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=51&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=87&value=0x76543210&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=88&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=89&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=90&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=91&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=92&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=93&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=94&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=95&value=0x40&\r".encode())
time.sleep(5)
# _______________________________________________________
ser.write("/put/memory?address=39&value=214&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=40&value=194&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=41&value=96&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=42&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=43&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=44&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=45&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=46&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=47&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=48&value=112&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=49&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=50&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=51&value=0&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=87&value=0x76543210&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=88&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=89&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=90&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=91&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=92&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=93&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=94&value=0x40&\r".encode())
time.sleep(5)
ser.write("/put/memory?address=95&value=0x40&\r".encode())
time.sleep(5)

ser.write("/put/memory?address=52&value=1&\r".encode())
print ("wait 3s and all be ok!")
time.sleep(3)


```

# //ToDo Нейронные сети <a name="3"></a>

****
## //ToDo <a name="31"></a>

****
## //ToDo <a name="32"></a>

****
## //ToDo <a name="33"></a>

# Raspberry Pi <a name="4"></a>
> Raspberry Pi — одноплатный компьютер размером с банковскую карту, изначально разработанный как бюджетная система для обучения информатике, 
впоследствии получивший намного более широкое применение и популярность, чем ожидали его авторы. 
>

![Raspberry PI](assets/raspberry01.jpg)

**Raspberry PI**

## Описание <a name="41"></a>
На плате размером с кредитную карту вы найдёте всё то, что можете найти в обычном персональном компьютере: процессор, оперативную память, 
разъёмы HDMI, USB, Ethernet, аналоговые аудио- и видеовыходы. Кроме того, на плате расположены 40 контактов ввода/вывода общего назначения. К 
ним вы сможете подключать периферию для взаимодействия с внешним миром: исполнительные устройства вроде реле и сервомоторов или же любые 
сенсоры; в общем всё, что работает от электричества.

Штатной операционной системой для Raspberry Pi является Linux. Она устанавливается на micro-SD карту, а та в свою очередь — в специальном 
слоте на плате. Если вы не знаете Linux, не стоит пугаться. Напротив: этот компьютер — прекрасная возможность во всём разобраться. Потерять 
данные или сильно напортачить с настройками не так страшно, ведь образ на SD-карте можно восстановить за считанные минуты. После этого можно 
продолжить эксперименты с чистого листа или с определённой контрольной точки.

### Порты и аппаратные интерфейсы <a name="411"></a>
Для подключения монитора или телевизора используются композитный видеовыход или разъём HDMI. Кроме того, заводские OEM ЖК-экраны могут быть 
подключены через интерфейс DSI.
Raspberry Pi 2 Model B предоставляет 4 USB-порта, объединённых внутренним хабом. К ним, помимо всего прочего, можно подключить клавиатуру и 
мышь.

В качестве низкоуровневых интерфейсов доступны:

- 40 портов ввода-вывода общего назначения
- UART (Serial)
- Шина I²C/TWI
- Шина SPI с селектором между двумя устройствами
- Пины питания: 3,3 В, 5 В и земля

Колонки или наушники могут быть подключены через стандартное гнездо для 3,5 мм джеков. Также звук может передаваться через интерфейс HDMI.
На Raspberry Pi Model B+ доступен Ethernet-адаптер на 10/100 Мбит с выходом на стандартное гнездо 8P8C (RJ45).

### Распиновка платы <a name="412"></a>
![Распиновка Raspberry](assets/raspberry02.jpg)
**Распиновка Raspberry**

### Питание <a name="413"></a>
Raspberry Pi Model B+ может быть запитана через microUSB-кабель или через пины питания.
Номинальное напряжение питания — 5 В. Компьютер потребляет до 800 мА без внешних устройств.
Аппаратный выключатель питания на плате отсутствует. Для включения компьютера достаточно просто подсоединить кабель питания. Для выключения 
используйте штатную функцию операционной системы.

****
## Разбор тестового примера:<a name="42"></a> 

Нам необходимо следующее оборудование:

![](assets/raspberry03.png)

Берем Raspberry и аккуратно достаем карту памяти из прозрачного бокса.

![](assets/raspberry04.png)

Прежде всего нужно установить SD-карту с операционной системой Raspbian в соответствущее гнездо на плате Raspberry. В гнезде плата фиксируется 
благодаря блокирующему механизму. Для надежного закрепления нужно аккуратно вдавить пальцем карту в гнездо.

![](assets/raspberry05.png)

## Настройка SSH соединения с Raspberry Pi <a name="43"></a>

Используя ОС Linux выполнить подключение к RPi можно следующим образом:
```
ssh pi@XX.XX.XX.XX
```
где XX.XX.XX.XX - ранее определенный ip адрес устройства. 

Если вы работаете в ОС Windows, то вам нужно воспользоваться программой Putty.
В поле Имя хоста указываем ip адрес Raspberry в сети, порт 22 и тип подключения SSH.

Пароль пользователя pi: raspberry

***
## Как узнать адрес Raspberry? <a name="44"></a>

* В Ubuntu выполните команду *sudo nmap –sn < ip-адрес компьютера >/< маска >*.  Пример:
 *sudo nmap -sn 192.168.1.0/24*
* В Windows скачайте любое приложение, сканирующее адреса (к примеру, Advanced IP Scanner). Просканируйте сеть, в которой находится компьютер.
* В списке найдите устройство с именем, подобным “Raspberry PI”.
Если вы обнаружите несоклько микрокомпьютеров “Raspberry PI” в вашей сети, вам понадобится узнать т.н. MAC адрес устройства - уникальный идентификатор сетевого устройства, состоящий из 6 байт. Узнать его можно по команде:

```shell
$ ifconfig
$ eth0      Link encap:Ethernet  HWaddr `28:d2:44:69:2a:c8` 
```

Также вы можете определить вашу плату по уникальному имени устройства `hostname` в файле /etc/hosname:
```shell
$ cat /etc/hostame
$ host10
```
В исключительном случае вы можете обнаружить вашу плату опытным путем, отключая и подключая свой Pi к сети.


***
## Полезные команды для работы в ОС Raspbian <a name="45"></a>

-   "top" — запуск предустановленного в Raspbian диспетчера задач;
-   "sudo raspi-config" — запуск первоначального меню настроек;
-   "sudo passwd root" — создание пароля для пользователя root;
-   "startx" — запуск графической оболочки;
-   "sudo halt" — выключение RPi;
-   "logout" — выход из системы;
-   "sudo reboot" — перезагрузка RPi;
-   "cd" — переход в необходимую директорию, например, для перехода в директорию /etc/network/ - "cd /etc/network/"
-   "pwd" — путь до текущей директории;
-   "dir" — содержимое текущей директории;
-   "mkdir" — создание директории. Например, "mkdir /home/pitest/" создаст директорию "pitest";
-   "rmdir" — удаление директории. Например, "mdir /home/pitest/" - удаление директории "pitest";
-   "cat" — открыть файл для чтения. Например, "cat /etc/network/interfaces" покажет содержимое файла "interfaces";
-   "nano" — открыть файл для редактирования. Например, "nano
-   /etc/network/interfaces" откроет для редактирования файл "interfaces";
-   "ifconfig" — отобразит текущую конфигурацию сети;
-   "df" — выведет в консоли свободное и используемое дисковое пространство для всех разделов файловой системы;
-   "clear" — очистить экран терминала;
-   "Ctrl"+"Ins" — скопировать выделенное (текст);
-   "Shift"+"Ins" — вставить из буфера (текст);
-   "sudo" — выполнения команд c правами root пользователя. Например, это актуально, если вы зашли под пользователем "pi" и хотите из консоли 
отредактировать какой-нибудь системный файл - "sudo nano путь_до_файла";
-   "Ctrl"+"C" — остановка текущего действия/выход из консольного приложения;
-   "sudo apt-get update" — обновление списка доступных пакетов;
-   "sudo apt-get upgrade" — обновление установленных пакетов;
-   "sudo apt-get install" — установка необходимого пакета. Например, для
установки консольного браузера Links вводим "sudo apt-get install links".

***
## Программирование <a name="46"></a>

В качестве языка программирования выбран Python из-за своего удобства работы с базами данных и серверой частью.

в консоли SSH соединения с Raspberry делаем последовательно следующее:

Переход в ваш домашний каталог
```shell
$ cd ~
```
Создание папки для Хакатона
```shell
$ mkdir iot
$ cd iot
```
Создадим файл, в который будем писать код серверной части приложения на Python, а так же файл проекта, который содержит информацию о зависимостях, необходимых для приложения, и, содержащий код работы с базой данных и дополнительные функции:
```shell
$ touch server.py
$ touch utils.py
$ touch requirements.txt
$ mkdir templates
$ cd templates
$ touch index.html
```

Далее можно приступать к написанию кода приема данных от Электроэнцефалографа:


## //ToDo Подключение электроэнцефалографа к Raspberry <a name="47"></a>



## //ToDo Взаимодействие с ЭЭГ на Raspberry<a name="48"></a>

***
### //ToDo<a name="481"></a>

***
### //ToDo<a name="482"></a>

***
### //ToDo<a name="483"></a>





# Работа с IBM Bluemix <a name="5"></a>
## Регистрация в Bluemix <a name="51"></a>

Для начала переходим по ссылке https://console.ng.bluemix.net/.

В правом верхнем углу выбираем Sign UP.

![](assets/Bluemix1.JPG)

Заполняем форму и создаем аккаунт. Переходим на почту, указанную при регистрации и подтверждаем свой аккаунт.
Затем выполняем вход в созданный аккаунт (Log In на стартовой странице Bluemix).
После входа всплывет окно:

![](assets/Bluemix2.JPG)

Здесь надо выбрать, где будет расположено приложение,  а также ввести название организации. В качестве места расположения выберите US South. После выбора места и ввода названия организации, также будет предложено ввести имя пространства приложения, дадим имя пространству dev.
На этом регистрация и настройка аккаунта закончена.

## Создание приложения Node.js <a name="52"></a>

*Для данного этапа требуются установленные Node.js, Cloud Foundry CLI и Bluemix CLI. Подробности по ссылке https://console.ng.bluemix.net/docs/starters/install_cli.html*

Создадим примитивный вебсервер, используя Node.js.
Для этого создадим новую папку с предполагаемым именем будущего веб-приложения.(например mqttListener). Запускаем консоль Windows и переходим в только что созданную папку. Создадим файл app.js.(главный файл сервера) и  файл package.json, который будет содержать все зависимости (dependencies, названия необходимых пакетов). Это нужно для того, чтобы при сборке проекта в среде Bluemix, самой средой были установлены требуемые пакеты. Для создания package.json  прописать в консоли npm init и согласиться на все предложенные пункты без изменений (прим. В поле name недопустимы заглавные буквы).

Затем открываем любым текстовым редактором файл package и в поле scripts заменяем прописанное на:

    "start": "node ./app.js"
    
Это требуется для Bluemix, чтобы среда знала, какой файл запустить первым.
Для развертывания сервера будет использован npm пакет express. js (подробнее http://expressjs.com/) . Чтобы тестировать приложение на localhost, надо установить данный пакет. Для этого в консоли пропишем npm install express –save. Команда –save сразу запишет наш пакет в зависимости(dependencies) в файле package.json. При успешной установке появится папка node_modules.
В файле app.js пропишем:
```javascript
var express = require('express'),
	  app = express();


app.get('/', function (req, res) {
	 return res.send("App is working");
  });

//process.env.VCAP_APP_PORT for Bluemix instead of 3000
app.listen(process.env.VCAP_APP_PORT,function(){
	console.log("Start on 3000");
});
```
*Примечание: для того, чтобы приложение запускалось в Bluemix, первый параметр функции listen должен принимать значение process.env.VCAP_APP_PORT, однако для локального запуска сервера нужно прописать лишь номер порта, например 3000.*

Теперь наш мини-сервер готов к заливке в Bluemix.
Для начала надо залогиниться в Bluemix с помощью консоли Cloud Foundry.
Пропишем в консоли cf login. Затем вводим емейл и пароль нашего аккаунта при регистрации.

![](assets/Bluemix3.JPG)

Затем, находясь в папке с нашим проектом пишем: cf push %НазваниеПроекта. 
 В моем случае cf push mqttListener.  *Примечание:  консоль может поругаться, что название уже занято, выберите незанятое.*
 
После данной команды будут произведены операции создания проекта в среде Bluemix, его сборка, а также запуск.
Если перейти по ссылке https://console.ng.bluemix.net/dashboard/applications, то можно увидеть, что теперь появилось новое приложение. Кликая по ссылке в разделе Route, можно убедиться, что приложение работает.

## Подключение сервиса Watson IOT <a name="53"></a>

В разделе All applications (https://console.ng.bluemix.net/dashboard/applications)  щелкнем по Create service:

![](assets/Bluemix4.JPG)

Слева в разделе Services выберем Internet of Things и выберем сервис Internet of Things Platform:

![](assets/Bluemix5.JPG)

Ничего не изменяя, кликаем на Create. В итоге попадем на панель IOT. Сервис IOT подключен. 

## Принципы обмена MQTT-сообщениями в Bluemix и создание MQTT Device и MQTT API key <a name="54"></a>

Сервис Watson IOT предоставляет встроенного MQTT брокера.

Обмен MQTT сообщениями в Bluemix осуществляется в соответствии со схемой:

![](assets/Bluemix6.JPG)

**Пояснения к схеме.**

В среде Bluemix существует 2 вида MQTT клиентов, которые обмениваются сообщениями через брокера: device-клиент и application-клиент. У каждого из них свои принципы обмена сообщениями и для осуществления данных операций нужны разные реквизиты (credentials, о них будет рассказано ниже). Все MQTT-сообщения в Bluemix можно разделить на 2 вида: команды и непосредственная информация. Для обмена сообщениями MQTT брокер в Bluemix предоставляет 2 вида каналов, по одному на каждый вид сообщения: канал для команд (command thread) и канал для данных с датчиков (events thread).

Работа обоих видов клиентов начинается с подключения к брокеру, после этого каждый клиент может совершать операции, которые различаются в зависимости от типа клиента.

Клиенты-девайсы (датчики и т.п.) могут отправлять данные (publish events) на брокера по каналу данных и подписываться (subscribe) на канал команд, в который приходят команды от клиента-приложения.

Клиенты-приложения (в этой роли будет выступать наше веб приложение) могут подписываться (subscribe)на канал данных, которые приходят от датчиков, а также отправлять команды (publish commands) в канал команд.

Примечание: MQTT-сообщения, т.е. данные с датчиков и команды от приложений описаны в формате json. 
Пример данных с датчика:
```
{
	“sensorType” : ”temperature”,
	“value” : “25”
}
```
Пример команды от приложения:
```
{
	“command” : ”setMaxValue”
}
```
Итак, для того, чтобы работать с MQTT брокером, надо создать MQTT device и MQTT API key.

После создания сервиса в панели сервиса в разделе Connect your Devices выберите Launch dashboard. Откроется панель администрирования сервиса IOT.
На панели слева выбираем Devices. Далее нам нужно создать тип нашего будущего девайса. Для этого кликнем на Device types и затем на Create type:

![](assets/Bluemix7.jpg)

Выбираем Create device type. В поле name вводим название типа нашего устройства – MQTTDevice. **_Важно: запомните название типа, оно будет использоваться далее._**
Далее оставляем все без изменений, нажимаем на Next и в итоге на Create. В результате создастся новый тип девайса, это отобразится на панели.

Теперь создадим непосредственный девайс с нашим свежесозданным типом. Для этого переходим во вкладку Browse и выбираем Add Device.
В появившемся окне кликаем по Choose Device Type, выбираем созданный тип и кликаем Next.
В поле Device ID запишем ID устройства (придумываем сами, например: aabbccddee12), кликаем Next->Next->Next->Add.

**_Важный этап: запишите реквизиты устройства(credentials), которые показались после нажатия на Add, больше _возможности их увидеть не будет._**

Таким образом, был добавлен девайс, к которому будут подключаться реальные устройства.

![](assets/Bluemix8.JPG)

Теперь нужно создать API key для того, чтобы клиенты-приложения также могли подключаться к брокеру. На левой боковой панели выбираем раздел APPS. Затем кликаем по Generate API key.

**_Важно: запишите информацию о API key, позже ее невозможно будет снова увидеть._** Кликаем по Generate.

В результате этапа 4 были созданы реквизиты для подключения к брокеру клиента-девайса и клиента-приложения. 

## Описание подключения к MQTT брокеру и проверка передачи MQTT сообщений с помощью MQTTlens <a name="55"></a>

*Для более глубокого понимания можно прочитать статью https://www.ibm.com/developerworks/cloud/library/cl-mqtt-bluemix-iot-node-red-app/*

Подключение к брокеру использует аутентификацию.  
Для подключения к брокеру со стороны девайс-клиента нужны опции:

1) Hostname:  
```
tcp://< OrganizationID >.messaging.internetofthings.ibmcloud.com
```
OrganizationID – из реквизитов при создании девайса в сервисе IOT(см.этап 4)  


2) Client ID:  
```
d:< OrganizationID >:< DEVICETYPE >:< DEVICEID >
```
deviceType - созданный тип устройства.  
deviceID - ID созданного устройства.  

3) Username: use-token-auth

4) Password: < токен, полученный при создании девайса в сервисе IOT >


 
Подключение со стороны клиента-приложения:

1) Hostname: аналогично устройству  
2) Client ID:  
```
a:< OrganizationID >:< app-id >  
```
appID - идентификатор приложения. Может быть любым, например myApp  


3) Username: < API Key >  
Api Key - получили при создании ключа в IOT Platform в разделе APPS (см.этап 4).

4) Password: < токен, полученный при создании ключа в IOT Platform >  
  
  
После подключения к брокеру клиенты могут отправлять сообщения в каналы, либо подписываться на каналы.

Путь **канала данных для публикации(!)** устройством:  
```
iot-2/evt/<event-id>/fmt/<format>
```

EventID - любой идентификатор процесса ( например mySensor)  
format - формат переданного сообщения, в данном случае нужно json.  

**Для подписки(!)** на канал данных **со стороны приложения:**
```
iot-2/type/<type-id>/id/<device-id>/evt/<event-id>/fmt/<format-id>
```

type-id - название типа нашего устройства, например: MQTTDevice  
device-id  - идентификатор устройства, который можно найти в реквизитах девайса(credentials) из этапа 4.  
event-id  - eventId из пути публикации устройством.  
formatid - формат принятого сообщения, в данном случае json.  

**Для публикации клиентом-приложением(!)** команд в канал команд: 
```
iot-2/type/<type-id>/id/<device-id>/cmd/<cmd-id>/fmt/<format-id>  
```

type-id - название типа нашего устройства, например: MQTTDevice  
device-id  - идентификатор устройства, который можно найти в реквизитах девайса(credentials) из этапа 4.  
cmd-id – любой идентификатор команды, задаем сами (например getSmth)  
formatid - формат принятого сообщения, в данном случае json.  


**Для подписки** на канал команд **клиентом-девайсом**: 
```
iot-2/cmd/<cmd-id>/fmt/<format-id>.   
```

cmd-id – любой идентификатор команды, задаем сами (например getSmth).  
formatid - формат принятого сообщения, в данном случае json.  
  
  
Для проверки корректности передачи MQTT сообщений существует удобный сервис для Google Chrome- MQTTlens.  

![](assets/Bluemix9.JPG)

После установки MQTTlens, создадим новое подключение (+ рядом с Connections):

![](assets/Bluemix10.JPG)

Заполняя поля вышеописанным способом, создадим подключение сначала для девайс клиента, затем для клиента-приложения.  
Пример заполнения настроек (для клиента-девайса):  

![](assets/Bluemix11.JPG)

Пример заполнения настроек (для клиента-приложения):

![](assets/Bluemix12.JPG)

Затем подписываемся клиентом-приложением на команды, а клиентом-девайсом публикуем команды (в соответствии с описанным выше в начале этапа 5).  
В результате замечаем внизу окна принятые клиентом-приложением MQTT-сообщения:  

![](assets/Bluemix13.JPG)

## //ToDo Визуализация данных ЭЭГ <a name="56"></a>


# //ToDo Тренажер управления инвалидной коляской <a name="6"></a>

****
## //ToDo <a name="61"></a>

****
## //ToDo <a name="62"></a>

****
## //ToDo <a name="63"></a>

# //ToDo Основной алгоритм управления системой и тестирование проекта ИМК <a name="7"></a>

****
## //ToDo <a name="71"></a>

****
## //ToDo <a name="72"></a>

****
## //ToDo <a name="73"></a>

****
### Дополнительная литература <a name="a001"></a>

<a name="pub1">[1]</a> А. А. Фролов, В. Ю. Рощин // ИНТЕРФЕЙС МОЗГ-КОМПЬЮТЕР. РЕАЛЬНОСТЬ И ПЕРСПЕКТИВЫ. N6. Нейронные сети. 2017

<a name="pub2">[2]</a> http://www.drmueller-healthpsychology.com/What_is_AVE.html

<a name="pub3">[3]</a> В.Н.Кирой. Интерфейс мозг-компьютер (история, перспективы). Ростов-на-Дону, Издательство университета. 2011 г., 48 рис., 240 с.

<a name="pub4">[4]</a> К.Д.Вигасина. Разработка гибридного интерфейса глаз-мозг-компьютер, использующего саккады в ответ на стимулы. Дипломный проект. МГУ, Кафедра ВНД, 2015

<a name="pub5">[5]</a> http://brain.bio.msu.ru/bci_r.htm



